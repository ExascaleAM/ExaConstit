#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Requires Python3 to work.

A command line script that reads in gmsh v2.2 mesh files generated by Neper v4
that makes use of the faset option.

An example mesh might be generated by something like:
    neper -T -n1 -o n1
    neper -M n1.tess -o n1 -format 'msh' -faset 'faces' -order 1
    
You would then run this script like so:
    python -gdir='./' -odir='./' -ifile='n1.msh' -ofile='n1_mfem.msh'

If you want to see where a boundary corresponds to you can view them using the
mesh-explorer miniapp. You'll need to build the MFEM miniapps and have glvis
installed and running in order to see things. If you don't have glvis installed
you could also make use of the web app here: https://glvis.org/live/ and you'll
want to follow the directions here: https://github.com/GLVis/glvis-js/blob/master/live/README.md
"""

import argparse
import os

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)
        
def item_generator(things):
    for item in things:
        yield item
        yield '\n'

parser = argparse.ArgumentParser(description='Mesh cli for Neper v4 generated gmsh v2 files for MFEM input\n'
                                 'Requires the use of the faset feature in Neper.')

parser.add_argument(
       '-gdir',
       '--gmsh_file_dir',
       type=str,
       default='./',
       help='Directory of Neper v4 gmsh v2 mesh file (default: ./)'
)

parser.add_argument(
       '-odir',
       '--output_directory',
       type=str,
       default='./',
       help='Directory of modified gmsh v2 file to be used by MFEM (default: ./)'
)

parser.add_argument(
       '-ifile',
       '--input_filename',
       type=str,
       default='input.msh',
       help='Input filename of Neper generated gmsh v2 file (default: input.msh)'
)

parser.add_argument(
       '-ofile',
       '--output_filename',
       type=str,
       default='output.msh',
       help='Output directory of the modified gmsh file to be used by MFEM (default: output.msh)'
)

args = parser.parse_args()

#%%
# Neper gmsh directory and input filename
fdirs = args.gmsh_file_dir
fin = args.input_filename
if (fdirs == "./"):
    fdirs = os.getcwd()
    os.path.join(fdirs, '')
#%%
# Output gmsh directory and filename
fdiro = args.output_directory
fout = args.output_filename
if (fdiro == "./"):
    fdiro = os.getcwd()
    os.path.join(fdiro, '')

#%%
fh = os.path.join(fdirs, os.path.basename(fin))

reading_physnames = 0
reading_nodes = 0
reading_elements = 0
reading_periodic = 0
reading_fasets = 0

#Just read in all of the node data
mesh_nodes = []
#Just read in all of the 3D element data
mesh_3d_elems = []
#Just read in all of the 2D element data
mesh_2d_elems = []
#Just read in all of the periodic data
mesh_periodic = []
#Read in all of the relevant faset data
#Store
mesh_fasets = {}
mesh_physical_names = []
# We need to know the min and max 2d elements so we can 
mesh_min_3d_elem = 0
mesh_max_3d_elem = 0

with open(fh, "rt") as f:
    nphys = 0
    nnodes = 0
    nelems = 0
    nfasets = 0
    nfsets = 0
    ifaset = 0
    key = ''
    ord_elem = {'4', '5', '6', '11', '17', '18'}
    for line in f:
        #################################################
        # Identify begining of nodes and elements sections
        if line.find("$PhysicalNames") >= 0:
            reading_physnames = 1
            continue

        if line.find("$Nodes") >= 0:
            reading_nodes = 1
            continue
        
        if line.find("$Elements") >= 0:
            reading_elements = 1
            continue    

        if line.find("$Periodic") >= 0:
            reading_periodic = 1
            continue

        if line.find("$Fasets") >= 0:
            reading_fasets = 1
            continue

        #################################################    

        #################################################
        #Identify end of nodes and element sections
        if line.find("$EndPhysicalNames") >= 0:
            reading_physnames = 0
            continue
        if line.find("$EndElements") >= 0:
            reading_elements = 0
            continue
        if line.find("$EndNodes") >= 0:
            reading_nodes  = 0
            continue
        if line.find("$EndPeriodic") >= 0:
            reading_periodic  = 0
            continue
        if line.find("$EndFasets") >= 0:
            reading_fasets = 0
            continue
        #################################################
        if reading_physnames == 1:
            nphys = int(line.strip())
            reading_physnames = 2
            continue

        if reading_nodes == 1:
            nnodes = int(line.strip())
            reading_nodes = 2
            continue
        
        if reading_elements == 1:
            nelem = int(line.strip())
            mesh_min_3d_elem = nelem
            reading_elements = 2
            continue

        if reading_periodic == 1:
            mesh_periodic.append(line)
            continue

        if reading_fasets == 1:
            nfasets = int(line.strip())
            reading_fasets = 2
            continue
        #################################################
        if reading_physnames == 2:
            mesh_physical_names.append(line)
            continue

        if reading_nodes == 2:
            mesh_nodes.append(line)
            continue
        
        if reading_elements == 2:
            tmp = line.split()
            if (tmp[1] in ord_elem):
                mesh_min_3d_elem = min(int(tmp[0]), mesh_min_3d_elem)
                mesh_max_3d_elem = max(int(tmp[0]), mesh_max_3d_elem)
                mesh_3d_elems.append(line)
            continue

        if reading_fasets == 2:
            key = line.strip()
            reading_fasets = 3
            mesh_fasets[key] = []
            mesh_fasets[len(mesh_fasets) + 1] = mesh_fasets.pop(key)
            key = len(mesh_fasets)
            continue
        if reading_fasets == 3:
            nfsets = int(line)
            ifaset = 0
            reading_fasets = 4
            continue
        if reading_fasets == 4:
            ifaset = ifaset + 1
            mesh_fasets[key].append(line.split(' ', 1)[1])
            if (ifaset >= nfsets):
                reading_fasets = 2
            continue

#%%

# Want to keep track of all the 2d elements that belong to our faset sets
# so we can do a quick check to see if a 2d element from above is a surface element
# or not
faset_set = set()

mesh_physical_names[:] = [item for item in mesh_physical_names if(item.split()[0] =='3')]

elem_cnt = 1
for key, val in mesh_fasets.items():
    for line in val:
        elem = ''
        #1st order tri
        if(len(line.split()) == 3):
            elem = ' '.join([str(elem_cnt), '2 3', str(key), str(key), '0', line.strip('\n')])
        #1st order quad
        elif(len(line.split()) == 4):
            elem = ' '.join([str(elem_cnt), '3 3', str(key), str(key), '0', line.strip('\n')])
        #2nd order tri        
        elif(len(line.split()) == 6):
            elem = ' '.join([str(elem_cnt), '9 3', str(key), str(key), '0', line.strip('\n')])
        #2nd order quad        
        elif(len(line.split()) == 8):
            elem = ' '.join([str(elem_cnt), '16 3', str(key), str(key), '0', line.strip('\n')])
        mesh_2d_elems.append(elem)
        elem_cnt = elem_cnt + 1
    mesh_physical_names.append('2 ' + str(key) + ' face'+str(key)+'\n')

n2d = len(mesh_2d_elems) + 1

for i in range(len(mesh_3d_elems)):
    tmp = mesh_3d_elems[i].split()
    tmp[0] = str(i + n2d)
    mesh_3d_elems[i] = ' '.join(tmp)

#%%
header = ['$MeshFormat\n2.2 0 8\n$EndMeshFormat\n']

fh = os.path.join(fdiro, os.path.basename(fout))

nelems = len(mesh_2d_elems) + len(mesh_3d_elems)

with open(fh, 'w') as f:
    f.writelines(header)
    item = ['$Nodes', str(len(mesh_nodes))]
    f.writelines(item_generator(item))
    f.writelines(mesh_nodes)
    f.writelines(item_generator(['$EndNodes', '$Elements', str(nelems)]))
    f.writelines(item_generator(mesh_2d_elems))
    f.writelines(item_generator(mesh_3d_elems))
    f.writelines(item_generator(['$EndElements']))
    if(len(mesh_periodic) > 0):
        f.writelines(['$Periodics\n'])
        f.writelines(mesh_periodic)
        f.writelines(['$EndPeriodic\n'])
    f.writelines(item_generator(['$PhysicalNames', str(len(mesh_physical_names))]))
    f.writelines(mesh_physical_names)
    f.writelines(['$EndPhysicalNames\n'])